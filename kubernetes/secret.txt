{"metadata":{"name":"cfg-gateway-api-connect","namespace":"airflightbackend-api-test","creationTimestamp":null,"labels":{"digital.io/app":"gateway","digital.io/backend-config":"true","digital.io/internal-product":"false","digital.io/log-format":"json","digital.io/product":"airflightbackend-api-test","digital.io/scope":"workload"},"annotations":{"digital.io/backend-config":"true","digital.io/description":"api-connect","digital.io/internal-product":"false","digital.io/name":"gateway","digital.io/product":"airflightbackend-api-test","digital.io/scope":"workload","digital.io/visible-by-channel":"false"}},"spec":{"serviceType":"api-connect","environment":"","productName":"airflightbackend-api-test","productVersion":"","componentName":"gateway","platformServiceName":"api-connect","configuration":{"apiConnectDefinition":"{\"productName\":\"airflightbackend-api-test\",\"productDescription\":\"Air Flight demo\",\"protocol\":\"http\",\"productTemplate\":{\"type\":\"apicProduct\",\"default\":true,\"name\":\"default-product\",\"content\":\"\\n{\\n  \\\"gateways\\\": [\\n    \\\"datapower-api-gateway\\\"\\n  ],\\n  \\\"info\\\": {\\n    \\\"name\\\": \\\"{{.ProductName}}\\\",\\n    \\\"title\\\": \\\"{{.ProductTitle}}\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  },\\n  \\\"plans\\\": {\\n    \\\"default-plan\\\": {\\n      \\\"approval\\\": false,\\n      \\\"description\\\": \\\"Default Plan\\\",\\n      \\\"rate-limits\\\": {\\n        \\\"default\\\": {\\n          \\\"value\\\": \\\"100/1hour\\\"\\n        }\\n      },\\n      \\\"title\\\": \\\"Default Plan\\\"\\n    }\\n  },\\n  \\\"product\\\": \\\"1.0.0\\\",\\n  \\\"visibility\\\": {\\n    \\\"subscribe\\\": {\\n      \\\"enabled\\\": true,\\n      \\\"orgs\\\": [],\\n      \\\"type\\\": \\\"authenticated\\\"\\n    },\\n    \\\"view\\\": {\\n      \\\"enabled\\\": true,\\n      \\\"orgs\\\": [],\\n      \\\"type\\\": \\\"public\\\"\\n    }\\n  }\\n}\\n\"},\"apis\":{\"airflightbackend\":{\"versions\":{\"v1\":{\"name\":\"airflightbackend\",\"version\":\"v1\",\"definition\":\"{\\n  \\\"basePath\\\": \\\"/\\\",\\n  \\\"definitions\\\": {\\n    \\\"CollectionDtoFlight\\\": {\\n      \\\"properties\\\": {\\n        \\\"items\\\": {\\n          \\\"items\\\": {\\n            \\\"$ref\\\": \\\"#/definitions/Flight\\\"\\n          },\\n          \\\"type\\\": \\\"array\\\"\\n        }\\n      },\\n      \\\"type\\\": \\\"object\\\"\\n    },\\n    \\\"Flight\\\": {\\n      \\\"description\\\": \\\"flight entity\\\",\\n      \\\"properties\\\": {\\n        \\\"cargo\\\": {\\n          \\\"type\\\": \\\"boolean\\\"\\n        },\\n        \\\"date\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"fromAirPort\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"id\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"military\\\": {\\n          \\\"type\\\": \\\"boolean\\\"\\n        },\\n        \\\"name\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        },\\n        \\\"numOfPassengers\\\": {\\n          \\\"format\\\": \\\"int32\\\",\\n          \\\"type\\\": \\\"integer\\\"\\n        },\\n        \\\"toAirPort\\\": {\\n          \\\"type\\\": \\\"string\\\"\\n        }\\n      },\\n      \\\"type\\\": \\\"object\\\"\\n    }\\n  },\\n  \\\"host\\\": \\\"localhost\\\",\\n  \\\"info\\\": {\\n    \\\"contact\\\": {\\n      \\\"email\\\": \\\"dplt@cegka.com\\\",\\n      \\\"name\\\": \\\"Cegeka\\\",\\n      \\\"url\\\": \\\"https://www.cegeka.com/\\\"\\n    },\\n    \\\"description\\\": \\\"FlightApp API to show flight information\\\",\\n    \\\"license\\\": {\\n      \\\"name\\\": \\\"Apache 2.0\\\",\\n      \\\"url\\\": \\\"http://springdoc.org\\\"\\n    },\\n    \\\"title\\\": \\\"Demo FlightApp API\\\",\\n    \\\"version\\\": \\\"1.0.0\\\"\\n  },\\n  \\\"paths\\\": {\\n    \\\"/api/airflightbackend/v1/version\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"return the version of the api\\\",\\n        \\\"operationId\\\": \\\"getVersion\\\",\\n        \\\"parameters\\\": [],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"string\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"version-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/v1/api/flights\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"find all the flights\\\",\\n        \\\"operationId\\\": \\\"findAllFlights\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"description\\\": \\\"Filters on the departure airport. Can be empty.\\\",\\n            \\\"in\\\": \\\"query\\\",\\n            \\\"name\\\": \\\"from\\\",\\n            \\\"required\\\": false,\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        ],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/definitions/CollectionDtoFlight\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"flight-controller\\\"\\n        ]\\n      },\\n      \\\"post\\\": {\\n        \\\"consumes\\\": [\\n          \\\"application/json\\\"\\n        ],\\n        \\\"description\\\": \\\"Create a new flight\\\",\\n        \\\"operationId\\\": \\\"saveFlight\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"in\\\": \\\"body\\\",\\n            \\\"name\\\": \\\"body\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/definitions/Flight\\\"\\n            }\\n          }\\n        ],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"201\\\": {\\n            \\\"description\\\": \\\"Created\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/definitions/Flight\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"flight-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/v1/api/flights/{id}\\\": {\\n      \\\"delete\\\": {\\n        \\\"description\\\": \\\"Delete a flight\\\",\\n        \\\"operationId\\\": \\\"deleteFlight\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"202\\\": {\\n            \\\"description\\\": \\\"Deleted\\\"\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"flight-controller\\\"\\n        ]\\n      },\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"find a flight by Id\\\",\\n        \\\"operationId\\\": \\\"findFlightById\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        ],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/definitions/Flight\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"flight-controller\\\"\\n        ]\\n      },\\n      \\\"put\\\": {\\n        \\\"consumes\\\": [\\n          \\\"application/json\\\"\\n        ],\\n        \\\"description\\\": \\\"Update an existing flight\\\",\\n        \\\"operationId\\\": \\\"updateFlight\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"description\\\": \\\"flight entity\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          {\\n            \\\"in\\\": \\\"body\\\",\\n            \\\"name\\\": \\\"body\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/definitions/Flight\\\"\\n            }\\n          }\\n        ],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"201\\\": {\\n            \\\"description\\\": \\\"Updated\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"#/definitions/Flight\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"flight-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/v1/api/messages\\\": {\\n      \\\"get\\\": {\\n        \\\"operationId\\\": \\\"messages\\\",\\n        \\\"parameters\\\": [],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"additionalProperties\\\": {\\n                \\\"type\\\": \\\"object\\\"\\n              },\\n              \\\"type\\\": \\\"object\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"message-of-the-day-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/v1/api/userProfile\\\": {\\n      \\\"get\\\": {\\n        \\\"operationId\\\": \\\"getUserDetails\\\",\\n        \\\"parameters\\\": [],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"additionalProperties\\\": {\\n                \\\"type\\\": \\\"object\\\"\\n              },\\n              \\\"type\\\": \\\"object\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"message-of-the-day-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/v1/api/userProfileJWT\\\": {\\n      \\\"get\\\": {\\n        \\\"operationId\\\": \\\"getUserDetails_2\\\",\\n        \\\"parameters\\\": [],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"additionalProperties\\\": {\\n                \\\"type\\\": \\\"object\\\"\\n              },\\n              \\\"type\\\": \\\"object\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"message-of-the-day-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/v1/api/userProfileOpaque\\\": {\\n      \\\"get\\\": {\\n        \\\"operationId\\\": \\\"getUserDetails_1\\\",\\n        \\\"parameters\\\": [],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"additionalProperties\\\": {\\n                \\\"type\\\": \\\"object\\\"\\n              },\\n              \\\"type\\\": \\\"object\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"message-of-the-day-controller\\\"\\n        ]\\n      }\\n    },\\n    \\\"/version\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"return the version of the api\\\",\\n        \\\"operationId\\\": \\\"getVersion_1\\\",\\n        \\\"parameters\\\": [],\\n        \\\"produces\\\": [\\n          \\\"application/octet-stream\\\"\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"OK\\\",\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"string\\\"\\n            }\\n          }\\n        },\\n        \\\"tags\\\": [\\n          \\\"version-controller\\\"\\n        ]\\n      }\\n    }\\n  },\\n  \\\"schemes\\\": [\\n    \\\"http\\\",\\n    \\\"https\\\"\\n  ],\\n  \\\"swagger\\\": \\\"2.0\\\",\\n  \\\"x-components\\\": {}\\n}\",\"targetURL\":\"http://airflightbackend-api-test-gateway.apps.envi.envi.dplt.eu/api/airflightbackend/v1\",\"templates\":{\"apicSecurity\":{\"type\":\"apicSecurity\",\"default\":true,\"name\":\"default-security\",\"content\":\"\\n{\\n  \\\"security\\\": [\\n    {\\n      \\\"Oauth2\\\": [\\n        \\\"openid\\\"\\n      ]\\n    }\\n  ]\\n}\\n\"},\"apicSecurityDefinition\":{\"type\":\"apicSecurityDefinition\",\"default\":true,\"name\":\"default-security-definition\",\"content\":\"\\n{\\n  \\\"securityDefinitions\\\": {\\n    \\\"Oauth2\\\": {\\n      \\\"type\\\": \\\"oauth2\\\",\\n      \\\"flow\\\": \\\"accessCode\\\",\\n      \\\"x-ibm-oauth-provider\\\": \\\"okta\\\",\\n      \\\"authorizationUrl\\\": \\\"{{.OktaAuthorisationURL}}\\\",\\n      \\\"tokenUrl\\\": \\\"{{.OktaTokenURL}}\\\",\\n      \\\"scopes\\\": {\\n        \\\"openid\\\": \\\"testscope\\\"\\n      }\\n    }\\n  }\\n}\\n\"},\"apicXIbmConfiguration\":{\"type\":\"apicXIbmConfiguration\",\"default\":true,\"name\":\"default-x-ibm-configuration\",\"content\":\"\\n{\\n  \\\"x-ibm-configuration\\\": {\\n    \\\"properties\\\": {\\n      \\\"target-url\\\": {\\n        \\\"description\\\": \\\"URL of the proxy policy\\\",\\n        \\\"encoded\\\": false,\\n        \\\"value\\\": \\\"{{.TargetURL}}\\\"\\n      }\\n    },\\n    \\\"cors\\\": {\\n      \\\"enabled\\\": true\\n    },\\n    \\\"gateway\\\": \\\"datapower-api-gateway\\\",\\n    \\\"type\\\": \\\"rest\\\",\\n    \\\"phase\\\": \\\"realized\\\",\\n    \\\"enforced\\\": true,\\n    \\\"testable\\\": true,\\n    \\\"assembly\\\": {\\n      \\\"execute\\\": [\\n        {\\n          \\\"gatewayscript\\\": {\\n            \\\"version\\\": \\\"2.0.0\\\",\\n            \\\"title\\\": \\\"gatewayscript\\\",\\n            \\\"source\\\": \\\"function uuidv4() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) { var r = (Math.random() * 16) | 0, v = c == 'x'' ? r : (r \\u0026 0x3) | 0x8; return v.toString(16);});} if(!context.get('request.headers.x-client-trace-id')){context.set('message.headers.x-client-trace-id',uuidv4())} if(!context.get('request.headers.x-b3-traceid')){context.set('message.headers.x-b3-traceid',uuidv4())} console.log(`Header x-client-trace-id:${context.get('message.headers.x-client-trace-id')}`) console.log(`Header x-b3-traceid:${context.get('message.headers.x-b3-traceid')}`)\\\"\\n          }\\n        },\\n        {\\n          \\\"invoke\\\": {\\n            \\\"title\\\": \\\"invoke\\\",\\n            \\\"version\\\": \\\"2.0.0\\\",\\n            \\\"verb\\\": \\\"keep\\\",\\n            \\\"target-url\\\": \\\"$(target-url)$(request.path)$(request.search)\\\",\\n            \\\"follow-redirects\\\": false,\\n            \\\"timeout\\\": 60,\\n            \\\"parameter-control\\\": {\\n              \\\"type\\\": \\\"blocklist\\\",\\n              \\\"values\\\": []\\n            },\\n            \\\"header-control\\\": {\\n              \\\"type\\\": \\\"blocklist\\\",\\n              \\\"values\\\": []\\n            },\\n            \\\"inject-proxy-headers\\\": true\\n          }\\n        }\\n      ]\\n    },\\n    \\\"application-authentication\\\": {\\n      \\\"certificate\\\": false\\n    }\\n  }\\n}\\n\"}}}}}}}","apiConnectFQDN":"airflightbackend-api-test-gateway.apps.envi.envi.dplt.eu"}},"status":{"configuration":{"publish":"{\"api_urls\":[\"https://apic-mgmt-platform-api-apic.apps.envi.envi.dplt.eu/api/catalogs/e95296d5-7180-4644-a7bf-cd9d359f09b5/1ce9cc2f-3670-4110-b98d-93f914521c80/apis/c205060c-deb4-4f0a-8bcf-4140780b9885\"],\"api_version\":\"2.0.0\",\"billing_urls\":[],\"catalog_url\":\"https://apic-mgmt-platform-api-apic.apps.envi.envi.dplt.eu/api/catalogs/e95296d5-7180-4644-a7bf-cd9d359f09b5/1ce9cc2f-3670-4110-b98d-93f914521c80\",\"created_at\":\"2021-07-01T07:24:52.000Z\",\"gateway_service_urls\":[\"https://apic-mgmt-platform-api-apic.apps.envi.envi.dplt.eu/api/catalogs/e95296d5-7180-4644-a7bf-cd9d359f09b5/1ce9cc2f-3670-4110-b98d-93f914521c80/configured-gateway-services/c72a5ac3-a7ed-4c40-9cac-ccc98808e5ff\"],\"gateway_types\":[\"datapower-api-gateway\"],\"id\":\"41860b25-cac3-466e-a3c8-3bf736b4a91e\",\"name\":\"airflightbackend-api-test\",\"oauth_provider_urls\":[],\"org_url\":\"https://apic-mgmt-platform-api-apic.apps.envi.envi.dplt.eu/api/orgs/e95296d5-7180-4644-a7bf-cd9d359f09b5\",\"plans\":[{\"name\":\"default-plan\",\"title\":\"Default Plan\"}],\"scope\":\"catalog\",\"state\":\"published\",\"task_urls\":[],\"title\":\"Air Flight demo\",\"type\":\"product\",\"updated_at\":\"2021-07-01T07:24:53.089Z\",\"url\":\"https://apic-mgmt-platform-api-apic.apps.envi.envi.dplt.eu/api/catalogs/e95296d5-7180-4644-a7bf-cd9d359f09b5/1ce9cc2f-3670-4110-b98d-93f914521c80/products/41860b25-cac3-466e-a3c8-3bf736b4a91e\",\"version\":\"1.0.0\",\"visibility\":{\"subscribe\":{\"enabled\":true,\"type\":\"authenticated\"},\"view\":{\"enabled\":true,\"type\":\"public\"}}}"}}}
